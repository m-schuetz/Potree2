{"version":3,"file":"radix-sort-umd.js","sources":["../../src/shaders/prefix_sum.js","../../src/shaders/optimizations/prefix_sum_no_bank_conflict.js","../../src/utils.js","../../src/PrefixSumKernel.js","../../src/shaders/radix_sort.js","../../src/shaders/optimizations/radix_sort_local_shuffle.js","../../src/shaders/radix_sort_reorder.js","../../src/shaders/check_sort.js","../../src/CheckSortKernel.js","../../src/RadixSortKernel.js"],"sourcesContent":["const prefixSumSource = /* wgsl */ `\r\n\r\n@group(0) @binding(0) var<storage, read_write> items: array<u32>;\r\n@group(0) @binding(1) var<storage, read_write> blockSums: array<u32>;\r\n\r\noverride WORKGROUP_SIZE_X: u32;\r\noverride WORKGROUP_SIZE_Y: u32;\r\noverride THREADS_PER_WORKGROUP: u32;\r\noverride ITEMS_PER_WORKGROUP: u32;\r\noverride ELEMENT_COUNT: u32;\r\n\r\nvar<workgroup> temp: array<u32, ITEMS_PER_WORKGROUP*2>;\r\n\r\n@compute @workgroup_size(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)\r\nfn reduce_downsweep(\r\n    @builtin(workgroup_id) w_id: vec3<u32>,\r\n    @builtin(num_workgroups) w_dim: vec3<u32>,\r\n    @builtin(local_invocation_index) TID: u32, // Local thread ID\r\n) {\r\n    let WORKGROUP_ID = w_id.x + w_id.y * w_dim.x;\r\n    let WID = WORKGROUP_ID * THREADS_PER_WORKGROUP;\r\n    let GID = WID + TID; // Global thread ID\r\n    \r\n    let ELM_TID = TID * 2; // Element pair local ID\r\n    let ELM_GID = GID * 2; // Element pair global ID\r\n    \r\n    // Load input to shared memory\r\n    temp[ELM_TID]     = select(items[ELM_GID], 0, ELM_GID >= ELEMENT_COUNT);\r\n    temp[ELM_TID + 1] = select(items[ELM_GID + 1], 0, ELM_GID + 1 >= ELEMENT_COUNT);\r\n\r\n    var offset: u32 = 1;\r\n\r\n    // Up-sweep (reduce) phase\r\n    for (var d: u32 = ITEMS_PER_WORKGROUP >> 1; d > 0; d >>= 1) {\r\n        workgroupBarrier();\r\n\r\n        if (TID < d) {\r\n            var ai: u32 = offset * (ELM_TID + 1) - 1;\r\n            var bi: u32 = offset * (ELM_TID + 2) - 1;\r\n            temp[bi] += temp[ai];\r\n        }\r\n\r\n        offset *= 2;\r\n    }\r\n\r\n    // Save workgroup sum and clear last element\r\n    if (TID == 0) {\r\n        let last_offset = ITEMS_PER_WORKGROUP - 1;\r\n\r\n        blockSums[WORKGROUP_ID] = temp[last_offset];\r\n        temp[last_offset] = 0;\r\n    }\r\n\r\n    // Down-sweep phase\r\n    for (var d: u32 = 1; d < ITEMS_PER_WORKGROUP; d *= 2) {\r\n        offset >>= 1;\r\n        workgroupBarrier();\r\n\r\n        if (TID < d) {\r\n            var ai: u32 = offset * (ELM_TID + 1) - 1;\r\n            var bi: u32 = offset * (ELM_TID + 2) - 1;\r\n\r\n            let t: u32 = temp[ai];\r\n            temp[ai] = temp[bi];\r\n            temp[bi] += t;\r\n        }\r\n    }\r\n    workgroupBarrier();\r\n\r\n    // Copy result from shared memory to global memory\r\n    if (ELM_GID >= ELEMENT_COUNT) {\r\n        return;\r\n    }\r\n    items[ELM_GID] = temp[ELM_TID];\r\n\r\n    if (ELM_GID + 1 >= ELEMENT_COUNT) {\r\n        return;\r\n    }\r\n    items[ELM_GID + 1] = temp[ELM_TID + 1];\r\n}\r\n\r\n@compute @workgroup_size(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)\r\nfn add_block_sums(\r\n    @builtin(workgroup_id) w_id: vec3<u32>,\r\n    @builtin(num_workgroups) w_dim: vec3<u32>,\r\n    @builtin(local_invocation_index) TID: u32, // Local thread ID\r\n) {\r\n    let WORKGROUP_ID = w_id.x + w_id.y * w_dim.x;\r\n    let WID = WORKGROUP_ID * THREADS_PER_WORKGROUP;\r\n    let GID = WID + TID; // Global thread ID\r\n\r\n    let ELM_ID = GID * 2;\r\n\r\n    if (ELM_ID >= ELEMENT_COUNT) {\r\n        return;\r\n    }\r\n\r\n    let blockSum = blockSums[WORKGROUP_ID];\r\n\r\n    items[ELM_ID] += blockSum;\r\n\r\n    if (ELM_ID + 1 >= ELEMENT_COUNT) {\r\n        return;\r\n    }\r\n\r\n    items[ELM_ID + 1] += blockSum;\r\n}`\r\n\r\nexport default prefixSumSource","/**\r\n * Prefix sum with optimization to avoid bank conflicts\r\n * \r\n * (see Implementation section in README for details)\r\n */\r\nconst prefixSumNoBankConflictSource = /* wgsl */ `\r\n\r\n@group(0) @binding(0) var<storage, read_write> items: array<u32>;\r\n@group(0) @binding(1) var<storage, read_write> blockSums: array<u32>;\r\n\r\noverride WORKGROUP_SIZE_X: u32;\r\noverride WORKGROUP_SIZE_Y: u32;\r\noverride THREADS_PER_WORKGROUP: u32;\r\noverride ITEMS_PER_WORKGROUP: u32;\r\noverride ELEMENT_COUNT: u32;\r\n\r\nconst NUM_BANKS: u32 = 32;\r\nconst LOG_NUM_BANKS: u32 = 5;\r\n\r\nfn get_offset(offset: u32) -> u32 {\r\n    // return offset >> LOG_NUM_BANKS; // Conflict-free\r\n    return (offset >> NUM_BANKS) + (offset >> (2 * LOG_NUM_BANKS)); // Zero bank conflict\r\n}\r\n\r\nvar<workgroup> temp: array<u32, ITEMS_PER_WORKGROUP*2>;\r\n\r\n@compute @workgroup_size(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)\r\nfn reduce_downsweep(\r\n    @builtin(workgroup_id) w_id: vec3<u32>,\r\n    @builtin(num_workgroups) w_dim: vec3<u32>,\r\n    @builtin(local_invocation_index) TID: u32, // Local thread ID\r\n) {\r\n    let WORKGROUP_ID = w_id.x + w_id.y * w_dim.x;\r\n    let WID = WORKGROUP_ID * THREADS_PER_WORKGROUP;\r\n    let GID = WID + TID; // Global thread ID\r\n    \r\n    let ELM_TID = TID * 2; // Element pair local ID\r\n    let ELM_GID = GID * 2; // Element pair global ID\r\n    \r\n    // Load input to shared memory\r\n    let ai: u32 = TID;\r\n    let bi: u32 = TID + (ITEMS_PER_WORKGROUP >> 1);\r\n    let s_ai = ai + get_offset(ai);\r\n    let s_bi = bi + get_offset(bi);\r\n    let g_ai = ai + WID * 2;\r\n    let g_bi = bi + WID * 2;\r\n    temp[s_ai] = select(items[g_ai], 0, g_ai >= ELEMENT_COUNT);\r\n    temp[s_bi] = select(items[g_bi], 0, g_bi >= ELEMENT_COUNT);\r\n\r\n    var offset: u32 = 1;\r\n\r\n    // Up-sweep (reduce) phase\r\n    for (var d: u32 = ITEMS_PER_WORKGROUP >> 1; d > 0; d >>= 1) {\r\n        workgroupBarrier();\r\n\r\n        if (TID < d) {\r\n            var ai: u32 = offset * (ELM_TID + 1) - 1;\r\n            var bi: u32 = offset * (ELM_TID + 2) - 1;\r\n            ai += get_offset(ai);\r\n            bi += get_offset(bi);\r\n            temp[bi] += temp[ai];\r\n        }\r\n\r\n        offset *= 2;\r\n    }\r\n\r\n    // Save workgroup sum and clear last element\r\n    if (TID == 0) {\r\n        var last_offset = ITEMS_PER_WORKGROUP - 1;\r\n        last_offset += get_offset(last_offset);\r\n\r\n        blockSums[WORKGROUP_ID] = temp[last_offset];\r\n        temp[last_offset] = 0;\r\n    }\r\n\r\n    // Down-sweep phase\r\n    for (var d: u32 = 1; d < ITEMS_PER_WORKGROUP; d *= 2) {\r\n        offset >>= 1;\r\n        workgroupBarrier();\r\n\r\n        if (TID < d) {\r\n            var ai: u32 = offset * (ELM_TID + 1) - 1;\r\n            var bi: u32 = offset * (ELM_TID + 2) - 1;\r\n            ai += get_offset(ai);\r\n            bi += get_offset(bi);\r\n\r\n            let t: u32 = temp[ai];\r\n            temp[ai] = temp[bi];\r\n            temp[bi] += t;\r\n        }\r\n    }\r\n    workgroupBarrier();\r\n\r\n    // Copy result from shared memory to global memory\r\n    if (g_ai < ELEMENT_COUNT) {\r\n        items[g_ai] = temp[s_ai];\r\n    }\r\n    if (g_bi < ELEMENT_COUNT) {\r\n        items[g_bi] = temp[s_bi];\r\n    }\r\n}\r\n\r\n@compute @workgroup_size(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)\r\nfn add_block_sums(\r\n    @builtin(workgroup_id) w_id: vec3<u32>,\r\n    @builtin(num_workgroups) w_dim: vec3<u32>,\r\n    @builtin(local_invocation_index) TID: u32, // Local thread ID\r\n) {\r\n    let WORKGROUP_ID = w_id.x + w_id.y * w_dim.x;\r\n    let WID = WORKGROUP_ID * THREADS_PER_WORKGROUP;\r\n    let GID = WID + TID; // Global thread ID\r\n\r\n    let ELM_ID = GID * 2;\r\n\r\n    if (ELM_ID >= ELEMENT_COUNT) {\r\n        return;\r\n    }\r\n\r\n    let blockSum = blockSums[WORKGROUP_ID];\r\n\r\n    items[ELM_ID] += blockSum;\r\n\r\n    if (ELM_ID + 1 >= ELEMENT_COUNT) {\r\n        return;\r\n    }\r\n\r\n    items[ELM_ID + 1] += blockSum;\r\n}`\r\n\r\nexport default prefixSumNoBankConflictSource","/**\r\n * Find the best dispatch size x and y dimensions to minimize unused workgroups\r\n * \r\n * @param {GPUDevice} device - The GPU device\r\n * @param {int} workgroup_count - Number of workgroups to dispatch\r\n * @returns \r\n */\r\nfunction find_optimal_dispatch_size(device, workgroup_count) {\r\n    const dispatchSize = { \r\n        x: workgroup_count, \r\n        y: 1\r\n    }\r\n\r\n    if (workgroup_count > device.limits.maxComputeWorkgroupsPerDimension) {\r\n        const x = Math.floor(Math.sqrt(workgroup_count))\r\n        const y = Math.ceil(workgroup_count / x)\r\n        \r\n        dispatchSize.x = x\r\n        dispatchSize.y = y\r\n    }\r\n\r\n    return dispatchSize\r\n}\r\n\r\nfunction create_buffer_from_data({device, label, data, usage = 0}) {\r\n    const dispatchSizes = device.createBuffer({\r\n        label: label,\r\n        usage: usage,\r\n        size: data.length * 4,\r\n        mappedAtCreation: true\r\n    })\r\n\r\n    const dispatchData = new Uint32Array(dispatchSizes.getMappedRange())\r\n    dispatchData.set(data)\r\n    dispatchSizes.unmap()\r\n\r\n    return dispatchSizes\r\n}\r\n\r\nexport {\r\n    find_optimal_dispatch_size,\r\n    create_buffer_from_data,\r\n}","import prefixSumSource from \"./shaders/prefix_sum\"\r\nimport prefixSumSource_NoBankConflict from \"./shaders/optimizations/prefix_sum_no_bank_conflict\"\r\nimport { find_optimal_dispatch_size } from \"./utils\"\r\n\r\nclass PrefixSumKernel {\r\n    /**\r\n     * Perform a parallel prefix sum on the given data buffer\r\n     * \r\n     * Based on \"Parallel Prefix Sum (Scan) with CUDA\"\r\n     * https://www.eecs.umich.edu/courses/eecs570/hw/parprefix.pdf\r\n     * \r\n     * @param {GPUDevice} device\r\n     * @param {GPUBuffer} data - Buffer containing the data to process\r\n     * @param {number} count - Max number of elements to process\r\n     * @param {object} workgroup_size - Workgroup size in x and y dimensions. (x * y) must be a power of two\r\n     * @param {boolean} avoid_bank_conflicts - Use the \"Avoid bank conflicts\" optimization from the original publication\r\n     */\r\n    constructor({\r\n        device,\r\n        data,\r\n        count,\r\n        workgroup_size = { x: 16, y: 16 },\r\n        avoid_bank_conflicts = false\r\n    }) {\r\n        this.device = device\r\n        this.workgroup_size = workgroup_size\r\n        this.threads_per_workgroup = workgroup_size.x * workgroup_size.y\r\n        this.items_per_workgroup = 2 * this.threads_per_workgroup // 2 items are processed per thread\r\n\r\n        if (Math.log2(this.threads_per_workgroup) % 1 !== 0) \r\n            throw new Error(`workgroup_size.x * workgroup_size.y must be a power of two. (current: ${this.threads_per_workgroup})`)\r\n\r\n        this.pipelines = []\r\n\r\n        this.shaderModule = this.device.createShaderModule({\r\n            label: 'prefix-sum',\r\n            code: avoid_bank_conflicts ? prefixSumSource_NoBankConflict : prefixSumSource,\r\n        })\r\n\r\n        this.create_pass_recursive(data, count)\r\n    }\r\n\r\n    create_pass_recursive(data, count) {\r\n        // Find best dispatch x and y dimensions to minimize unused threads\r\n        const workgroup_count = Math.ceil(count / this.items_per_workgroup)\r\n        const dispatchSize = find_optimal_dispatch_size(this.device, workgroup_count)\r\n        \r\n        // Create buffer for block sums        \r\n        const blockSumBuffer = this.device.createBuffer({\r\n            label: 'prefix-sum-block-sum',\r\n            size: workgroup_count * 4,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\r\n        })\r\n\r\n        // Create bind group and pipeline layout\r\n        const bindGroupLayout = this.device.createBindGroupLayout({\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'storage' }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'storage' }\r\n                }\r\n            ]\r\n        })\r\n\r\n        const bindGroup = this.device.createBindGroup({\r\n            label: 'prefix-sum-bind-group',\r\n            layout: bindGroupLayout,\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: { buffer: data }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: { buffer: blockSumBuffer }\r\n                }\r\n            ]\r\n        })\r\n\r\n        const pipelineLayout = this.device.createPipelineLayout({\r\n            bindGroupLayouts: [ bindGroupLayout ]\r\n        })\r\n\r\n        // Per-workgroup (block) prefix sum\r\n        const scanPipeline = this.device.createComputePipeline({\r\n            label: 'prefix-sum-scan-pipeline',\r\n            layout: pipelineLayout,\r\n            compute: {\r\n                module: this.shaderModule,\r\n                entryPoint: 'reduce_downsweep',\r\n                constants: {\r\n                    'WORKGROUP_SIZE_X': this.workgroup_size.x,\r\n                    'WORKGROUP_SIZE_Y': this.workgroup_size.y,\r\n                    'THREADS_PER_WORKGROUP': this.threads_per_workgroup,\r\n                    'ITEMS_PER_WORKGROUP': this.items_per_workgroup,\r\n                    'ELEMENT_COUNT': count,\r\n                }\r\n            }\r\n        })\r\n\r\n        this.pipelines.push({ pipeline: scanPipeline, bindGroup, dispatchSize })\r\n\r\n        if (workgroup_count > 1) {\r\n            // Prefix sum on block sums\r\n            this.create_pass_recursive(blockSumBuffer, workgroup_count)\r\n\r\n            // Add block sums to local prefix sums\r\n            const blockSumPipeline = this.device.createComputePipeline({\r\n                label: 'prefix-sum-add-block-pipeline',\r\n                layout: pipelineLayout,\r\n                compute: {\r\n                    module: this.shaderModule,\r\n                    entryPoint: 'add_block_sums',\r\n                    constants: {\r\n                        'WORKGROUP_SIZE_X': this.workgroup_size.x,\r\n                        'WORKGROUP_SIZE_Y': this.workgroup_size.y,\r\n                        'THREADS_PER_WORKGROUP': this.threads_per_workgroup,\r\n                        'ELEMENT_COUNT': count,\r\n                    }\r\n                }\r\n            })\r\n\r\n            this.pipelines.push({ pipeline: blockSumPipeline, bindGroup, dispatchSize })\r\n        }\r\n    }\r\n\r\n    get_dispatch_chain() {\r\n        return this.pipelines.flatMap(p => [ p.dispatchSize.x, p.dispatchSize.y, 1 ])\r\n    }\r\n\r\n    /**\r\n     * Encode the prefix sum pipeline into the current pass.\r\n     * If dispatchSizeBuffer is provided, the dispatch will be indirect (dispatchWorkgroupsIndirect)\r\n     * \r\n     * @param {GPUComputePassEncoder} pass \r\n     * @param {GPUBuffer} dispatchSizeBuffer - (optional) Indirect dispatch buffer\r\n     * @param {int} offset - (optional) Offset in bytes in the dispatch buffer. Default: 0\r\n     */\r\n    dispatch(pass, dispatchSizeBuffer, offset = 0) {\r\n        for (let i = 0; i < this.pipelines.length; i++) {\r\n            const { pipeline, bindGroup, dispatchSize } = this.pipelines[i]\r\n            \r\n            pass.setPipeline(pipeline)\r\n            pass.setBindGroup(0, bindGroup)\r\n\r\n            if (dispatchSizeBuffer == null)\r\n                pass.dispatchWorkgroups(dispatchSize.x, dispatchSize.y, 1)\r\n            else\r\n                pass.dispatchWorkgroupsIndirect(dispatchSizeBuffer, offset + i * 3 * 4)\r\n        }\r\n    }\r\n}\r\n\r\nexport default PrefixSumKernel","const radixSortSource = /* wgsl */ `\r\n\r\n@group(0) @binding(0) var<storage, read> input: array<u32>;\r\n@group(0) @binding(1) var<storage, read_write> local_prefix_sums: array<u32>;\r\n@group(0) @binding(2) var<storage, read_write> block_sums: array<u32>;\r\n\r\noverride WORKGROUP_COUNT: u32;\r\noverride THREADS_PER_WORKGROUP: u32;\r\noverride WORKGROUP_SIZE_X: u32;\r\noverride WORKGROUP_SIZE_Y: u32;\r\noverride CURRENT_BIT: u32;\r\noverride ELEMENT_COUNT: u32;\r\n\r\nvar<workgroup> s_prefix_sum: array<u32, 2 * (THREADS_PER_WORKGROUP + 1)>;\r\n\r\n@compute @workgroup_size(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)\r\nfn radix_sort(\r\n    @builtin(workgroup_id) w_id: vec3<u32>,\r\n    @builtin(num_workgroups) w_dim: vec3<u32>,\r\n    @builtin(local_invocation_index) TID: u32, // Local thread ID\r\n) {\r\n    let WORKGROUP_ID = w_id.x + w_id.y * w_dim.x;\r\n    let WID = WORKGROUP_ID * THREADS_PER_WORKGROUP;\r\n    let GID = WID + TID; // Global thread ID\r\n\r\n    // Extract 2 bits from the input\r\n    let elm = select(input[GID], 0, GID >= ELEMENT_COUNT);\r\n    let extract_bits: u32 = (elm >> CURRENT_BIT) & 0x3;\r\n\r\n    var bit_prefix_sums = array<u32, 4>(0, 0, 0, 0);\r\n\r\n    // If the workgroup is inactive, prevent block_sums buffer update\r\n    var LAST_THREAD: u32 = 0xffffffff; \r\n\r\n    if (WORKGROUP_ID < WORKGROUP_COUNT) {\r\n        // Otherwise store the index of the last active thread in the workgroup\r\n        LAST_THREAD = min(THREADS_PER_WORKGROUP, ELEMENT_COUNT - WID) - 1;\r\n    }\r\n\r\n    // Initialize parameters for double-buffering\r\n    let TPW = THREADS_PER_WORKGROUP + 1;\r\n    var swapOffset: u32 = 0;\r\n    var inOffset:  u32 = TID;\r\n    var outOffset: u32 = TID + TPW;\r\n\r\n    // 4-way prefix sum\r\n    for (var b: u32 = 0; b < 4; b++) {\r\n        // Initialize local prefix with bitmask\r\n        let bitmask = select(0u, 1u, extract_bits == b);\r\n        s_prefix_sum[inOffset + 1] = bitmask;\r\n        workgroupBarrier();\r\n\r\n        var prefix_sum: u32 = 0;\r\n\r\n        // Prefix sum\r\n        for (var offset: u32 = 1; offset < THREADS_PER_WORKGROUP; offset *= 2) {\r\n            if (TID >= offset) {\r\n                prefix_sum = s_prefix_sum[inOffset] + s_prefix_sum[inOffset - offset];\r\n            } else {\r\n                prefix_sum = s_prefix_sum[inOffset];\r\n            }\r\n\r\n            s_prefix_sum[outOffset] = prefix_sum;\r\n            \r\n            // Swap buffers\r\n            outOffset = inOffset;\r\n            swapOffset = TPW - swapOffset;\r\n            inOffset = TID + swapOffset;\r\n            \r\n            workgroupBarrier();\r\n        }\r\n\r\n        // Store prefix sum for current bit\r\n        bit_prefix_sums[b] = prefix_sum;\r\n\r\n        if (TID == LAST_THREAD) {\r\n            // Store block sum to global memory\r\n            let total_sum: u32 = prefix_sum + bitmask;\r\n            block_sums[b * WORKGROUP_COUNT + WORKGROUP_ID] = total_sum;\r\n        }\r\n\r\n        // Swap buffers\r\n        outOffset = inOffset;\r\n        swapOffset = TPW - swapOffset;\r\n        inOffset = TID + swapOffset;\r\n    }\r\n\r\n    if (GID < ELEMENT_COUNT) {\r\n        // Store local prefix sum to global memory\r\n        local_prefix_sums[GID] = bit_prefix_sums[extract_bits];\r\n    }\r\n}`\r\n\r\nexport default radixSortSource;","/**\r\n * Radix sort with \"local shuffle and coalesced mapping\" optimization\r\n * \r\n * (see Implementation section in README for details)\r\n */\r\nconst radixSortCoalescedSource = /* wgsl */ `\r\n\r\n@group(0) @binding(0) var<storage, read_write> input: array<u32>;\r\n@group(0) @binding(1) var<storage, read_write> local_prefix_sums: array<u32>;\r\n@group(0) @binding(2) var<storage, read_write> block_sums: array<u32>;\r\n@group(0) @binding(3) var<storage, read_write> values: array<u32>;\r\n\r\noverride WORKGROUP_COUNT: u32;\r\noverride THREADS_PER_WORKGROUP: u32;\r\noverride WORKGROUP_SIZE_X: u32;\r\noverride WORKGROUP_SIZE_Y: u32;\r\noverride CURRENT_BIT: u32;\r\noverride ELEMENT_COUNT: u32;\r\n\r\nvar<workgroup> s_prefix_sum: array<u32, 2 * (THREADS_PER_WORKGROUP + 1)>;\r\nvar<workgroup> s_prefix_sum_scan: array<u32, 4>;\r\n\r\n@compute @workgroup_size(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)\r\nfn radix_sort(\r\n    @builtin(workgroup_id) w_id: vec3<u32>,\r\n    @builtin(num_workgroups) w_dim: vec3<u32>,\r\n    @builtin(local_invocation_index) TID: u32, // Local thread ID\r\n) {\r\n    let WORKGROUP_ID = w_id.x + w_id.y * w_dim.x;\r\n    let WID = WORKGROUP_ID * THREADS_PER_WORKGROUP;\r\n    let GID = WID + TID; // Global thread ID\r\n\r\n    // Extract 2 bits from the input\r\n    var elm: u32 = 0;\r\n    var val: u32 = 0;\r\n    if (GID < ELEMENT_COUNT) {\r\n        elm = input[GID];\r\n        val = values[GID];\r\n    }\r\n    let extract_bits: u32 = (elm >> CURRENT_BIT) & 0x3;\r\n\r\n    var bit_prefix_sums = array<u32, 4>(0, 0, 0, 0);\r\n\r\n    // If the workgroup is inactive, prevent block_sums buffer update\r\n    var LAST_THREAD: u32 = 0xffffffff; \r\n\r\n    if (WORKGROUP_ID < WORKGROUP_COUNT) {\r\n        // Otherwise store the index of the last active thread in the workgroup\r\n        LAST_THREAD = min(THREADS_PER_WORKGROUP, ELEMENT_COUNT - WID) - 1;\r\n    }\r\n\r\n    // Initialize parameters for double-buffering\r\n    let TPW = THREADS_PER_WORKGROUP + 1;\r\n    var swapOffset: u32 = 0;\r\n    var inOffset:  u32 = TID;\r\n    var outOffset: u32 = TID + TPW;\r\n\r\n    // 4-way prefix sum\r\n    for (var b: u32 = 0; b < 4; b++) {\r\n        // Initialize local prefix with bitmask\r\n        let bitmask = select(0u, 1u, extract_bits == b);\r\n        s_prefix_sum[inOffset + 1] = bitmask;\r\n        workgroupBarrier();\r\n\r\n        var prefix_sum: u32 = 0;\r\n\r\n        // Prefix sum\r\n        for (var offset: u32 = 1; offset < THREADS_PER_WORKGROUP; offset *= 2) {\r\n            if (TID >= offset) {\r\n                prefix_sum = s_prefix_sum[inOffset] + s_prefix_sum[inOffset - offset];\r\n            } else {\r\n                prefix_sum = s_prefix_sum[inOffset];\r\n            }\r\n\r\n            s_prefix_sum[outOffset] = prefix_sum;\r\n\r\n            // Swap buffers\r\n            outOffset = inOffset;\r\n            swapOffset = TPW - swapOffset;\r\n            inOffset = TID + swapOffset;\r\n            \r\n            workgroupBarrier();\r\n        }\r\n\r\n        // Store prefix sum for current bit\r\n        bit_prefix_sums[b] = prefix_sum;\r\n\r\n        if (TID == LAST_THREAD) {\r\n            // Store block sum to global memory\r\n            let total_sum: u32 = prefix_sum + bitmask;\r\n            block_sums[b * WORKGROUP_COUNT + WORKGROUP_ID] = total_sum;\r\n        }\r\n\r\n        // Swap buffers\r\n        outOffset = inOffset;\r\n        swapOffset = TPW - swapOffset;\r\n        inOffset = TID + swapOffset;\r\n    }\r\n\r\n    let prefix_sum = bit_prefix_sums[extract_bits];   \r\n\r\n    // Scan bit prefix sums\r\n    if (TID == LAST_THREAD) {\r\n        var sum: u32 = 0;\r\n        bit_prefix_sums[extract_bits] += 1;\r\n        for (var i: u32 = 0; i < 4; i++) {\r\n            s_prefix_sum_scan[i] = sum;\r\n            sum += bit_prefix_sums[i];\r\n        }\r\n    }\r\n    workgroupBarrier();\r\n\r\n    if (GID < ELEMENT_COUNT) {\r\n        // Compute new position\r\n        let new_pos: u32 = prefix_sum + s_prefix_sum_scan[extract_bits];\r\n\r\n        // Shuffle elements locally\r\n        input[WID + new_pos] = elm;\r\n        values[WID + new_pos] = val;\r\n        local_prefix_sums[WID + new_pos] = prefix_sum;\r\n    }\r\n}`\r\n\r\nexport default radixSortCoalescedSource;","const radixSortReorderSource = /* wgsl */ `\r\n\r\n@group(0) @binding(0) var<storage, read> inputKeys: array<u32>;\r\n@group(0) @binding(1) var<storage, read_write> outputKeys: array<u32>;\r\n@group(0) @binding(2) var<storage, read> local_prefix_sum: array<u32>;\r\n@group(0) @binding(3) var<storage, read> prefix_block_sum: array<u32>;\r\n@group(0) @binding(4) var<storage, read> inputValues: array<u32>;\r\n@group(0) @binding(5) var<storage, read_write> outputValues: array<u32>;\r\n\r\noverride WORKGROUP_COUNT: u32;\r\noverride THREADS_PER_WORKGROUP: u32;\r\noverride WORKGROUP_SIZE_X: u32;\r\noverride WORKGROUP_SIZE_Y: u32;\r\noverride CURRENT_BIT: u32;\r\noverride ELEMENT_COUNT: u32;\r\n\r\n@compute @workgroup_size(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)\r\nfn radix_sort_reorder(\r\n    @builtin(workgroup_id) w_id: vec3<u32>,\r\n    @builtin(num_workgroups) w_dim: vec3<u32>,\r\n    @builtin(local_invocation_index) TID: u32, // Local thread ID\r\n) { \r\n    let WORKGROUP_ID = w_id.x + w_id.y * w_dim.x;\r\n    let WID = WORKGROUP_ID * THREADS_PER_WORKGROUP;\r\n    let GID = WID + TID; // Global thread ID\r\n\r\n    if (GID >= ELEMENT_COUNT) {\r\n        return;\r\n    }\r\n\r\n    let k = inputKeys[GID];\r\n    let v = inputValues[GID];\r\n\r\n    let local_prefix = local_prefix_sum[GID];\r\n\r\n    // Calculate new position\r\n    let extract_bits = (k >> CURRENT_BIT) & 0x3;\r\n    let pid = extract_bits * WORKGROUP_COUNT + WORKGROUP_ID;\r\n    let sorted_position = prefix_block_sum[pid] + local_prefix;\r\n    \r\n    outputKeys[sorted_position] = k;\r\n    outputValues[sorted_position] = v;\r\n}`\r\n\r\nexport default radixSortReorderSource;","const checkSortSource = (isFirstPass = false, isLastPass = false, kernelMode = 'full') => /* wgsl */ `\r\n\r\n@group(0) @binding(0) var<storage, read> input: array<u32>;\r\n@group(0) @binding(1) var<storage, read_write> output: array<u32>;\r\n@group(0) @binding(2) var<storage, read> original: array<u32>;\r\n@group(0) @binding(3) var<storage, read_write> is_sorted: u32;\r\n\r\noverride WORKGROUP_SIZE_X: u32;\r\noverride WORKGROUP_SIZE_Y: u32;\r\noverride THREADS_PER_WORKGROUP: u32;\r\noverride ELEMENT_COUNT: u32;\r\noverride START_ELEMENT: u32;\r\n\r\nvar<workgroup> s_data: array<u32, THREADS_PER_WORKGROUP>;\r\n\r\n// Reset dispatch buffer and is_sorted flag\r\n@compute @workgroup_size(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)\r\nfn reset(\r\n    @builtin(workgroup_id) w_id: vec3<u32>,\r\n    @builtin(num_workgroups) w_dim: vec3<u32>,\r\n    @builtin(local_invocation_index) TID: u32, // Local thread ID\r\n) {\r\n    if (TID >= ELEMENT_COUNT) {\r\n        return;\r\n    }\r\n\r\n    if (TID == 0) {\r\n        is_sorted = 0u;\r\n    }\r\n\r\n    let ELM_ID = TID * 3;\r\n\r\n    output[ELM_ID] = original[ELM_ID];\r\n}\r\n\r\n@compute @workgroup_size(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)\r\nfn check_sort(\r\n    @builtin(workgroup_id) w_id: vec3<u32>,\r\n    @builtin(num_workgroups) w_dim: vec3<u32>,\r\n    @builtin(local_invocation_index) TID: u32, // Local thread ID\r\n) {\r\n    let WORKGROUP_ID = w_id.x + w_id.y * w_dim.x;\r\n    let WID = WORKGROUP_ID * THREADS_PER_WORKGROUP + START_ELEMENT;\r\n    let GID = TID + WID; // Global thread ID\r\n\r\n    // Load data into shared memory\r\n    ${ isFirstPass ? first_pass_load_data : \"s_data[TID] = select(0u, input[GID], GID < ELEMENT_COUNT);\" }\r\n\r\n    // Perform parallel reduction\r\n    for (var d = 1u; d < THREADS_PER_WORKGROUP; d *= 2u) {      \r\n        workgroupBarrier();  \r\n        if (TID % (2u * d) == 0u) {\r\n            s_data[TID] += s_data[TID + d];\r\n        }\r\n    }\r\n    workgroupBarrier();\r\n\r\n    // Write reduction result\r\n    ${ isLastPass ? last_pass(kernelMode) : write_reduction_result }\r\n}`\r\n\r\nconst write_reduction_result = /* wgsl */ `\r\n    if (TID == 0) {\r\n        output[WORKGROUP_ID] = s_data[0];\r\n    }\r\n`\r\n\r\nconst first_pass_load_data = /* wgsl */ `\r\n    let LAST_THREAD = min(THREADS_PER_WORKGROUP, ELEMENT_COUNT - WID) - 1;\r\n\r\n    // Load current element into shared memory\r\n    // Also load next element for comparison\r\n    let elm = select(0u, input[GID], GID < ELEMENT_COUNT);\r\n    let next = select(0u, input[GID + 1], GID < ELEMENT_COUNT-1);\r\n    s_data[TID] = elm;\r\n    workgroupBarrier();\r\n\r\n    s_data[TID] = select(0u, 1u, GID < ELEMENT_COUNT-1 && elm > next);\r\n`\r\n\r\nconst last_pass = (kernelMode) => /* wgsl */ `\r\n    let fullDispatchLength = arrayLength(&output);\r\n    let dispatchIndex = TID * 3;\r\n\r\n    if (dispatchIndex >= fullDispatchLength) {\r\n        return;\r\n    }\r\n\r\n    ${kernelMode == 'full' ? last_pass_full : last_pass_fast}\r\n`\r\n\r\n// If the fast check kernel is sorted and the data isn't already sorted, run the full check\r\nconst last_pass_fast = /* wgsl */ `\r\n    output[dispatchIndex] = select(0, original[dispatchIndex], s_data[0] == 0 && is_sorted == 0u);\r\n`\r\n\r\n// If the full check kernel is sorted, set the flag to 1 and skip radix sort passes\r\nconst last_pass_full = /* wgsl */ `\r\n    if (TID == 0 && s_data[0] == 0) {\r\n        is_sorted = 1u;\r\n    }\r\n\r\n    output[dispatchIndex] = select(0, original[dispatchIndex], s_data[0] != 0);\r\n`\r\nexport default checkSortSource","import checkSortSource from \"./shaders/check_sort\"\r\nimport { find_optimal_dispatch_size } from \"./utils\"\r\n\r\nclass CheckSortKernel {\r\n    /**\r\n     * CheckSortKernel - Performs a parralel reduction to check if an array is sorted.\r\n     * \r\n     * @param {GPUDevice} device\r\n     * @param {GPUBuffer} data - The buffer containing the data to check\r\n     * @param {GPUBuffer} result - The result dispatch size buffer\r\n     * @param {GPUBuffer} original - The original dispatch size buffer\r\n     * @param {GPUBuffer} is_sorted - 1-element buffer to store whether the array is sorted\r\n     * @param {number} count - The number of elements to check\r\n     * @param {number} start - The index to start checking from\r\n     * @param {boolean} mode - The type of check sort kernel ('reset', 'fast', 'full')\r\n     * @param {object} workgroup_size - The workgroup size in x and y dimensions\r\n     */\r\n    constructor({\r\n        device,\r\n        data,\r\n        result,\r\n        original,\r\n        is_sorted,\r\n        count,\r\n        start = 0,\r\n        mode = 'full',\r\n        workgroup_size = { x: 16, y: 16 },\r\n    }) {\r\n        this.device = device\r\n        this.count = count\r\n        this.start = start\r\n        this.mode = mode\r\n        this.workgroup_size = workgroup_size\r\n        this.threads_per_workgroup = workgroup_size.x * workgroup_size.y\r\n\r\n        this.pipelines = []\r\n\r\n        this.buffers = {\r\n            data, \r\n            result, \r\n            original, \r\n            is_sorted,\r\n            outputs: []\r\n        }\r\n\r\n        this.create_passes_recursive(data, count)\r\n    }\r\n\r\n    // Find the best dispatch size for each pass to minimize unused workgroups\r\n    static find_optimal_dispatch_chain(device, item_count, workgroup_size) {\r\n        const threads_per_workgroup = workgroup_size.x * workgroup_size.y\r\n        const sizes = []\r\n\r\n        do {\r\n            // Number of workgroups required to process all items\r\n            const target_workgroup_count = Math.ceil(item_count / threads_per_workgroup)\r\n    \r\n            // Optimal dispatch size and updated workgroup count\r\n            const dispatchSize = find_optimal_dispatch_size(device, target_workgroup_count)\r\n    \r\n            sizes.push(dispatchSize.x, dispatchSize.y, 1)\r\n            item_count = target_workgroup_count\r\n        } while (item_count > 1)\r\n    \r\n        return sizes\r\n    }\r\n\r\n    create_passes_recursive(buffer, count, passIndex = 0) {\r\n        const workgroup_count = Math.ceil(count / this.threads_per_workgroup)\r\n\r\n        const isFirstPass = passIndex === 0\r\n        const isLastPass = workgroup_count <= 1\r\n\r\n        const label = `check-sort-${this.mode}-${passIndex}`\r\n\r\n        const outputBuffer = isLastPass ? this.buffers.result : this.device.createBuffer({\r\n            label: label,\r\n            size: workgroup_count * 4,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\r\n        })\r\n\r\n        const bindGroupLayout = this.device.createBindGroupLayout({\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'read-only-storage' }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'storage' }\r\n                },\r\n                // Last pass bindings\r\n                ...(isLastPass ? [{\r\n                    binding: 2,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'read-only-storage' }\r\n                }, {\r\n                    binding: 3,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'storage' }\r\n                }] : []),\r\n            ]\r\n        })\r\n\r\n        const bindGroup = this.device.createBindGroup({\r\n            layout: bindGroupLayout,\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: { buffer: buffer }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: { buffer: outputBuffer }\r\n                },\r\n                // Last pass buffers\r\n                ...(isLastPass ? [{\r\n                    binding: 2,\r\n                    resource: { buffer: this.buffers.original }\r\n                }, {\r\n                    binding: 3,\r\n                    resource: { buffer: this.buffers.is_sorted }\r\n                }] : []),\r\n            ]\r\n        })\r\n\r\n        const pipelineLayout = this.device.createPipelineLayout({\r\n            bindGroupLayouts: [bindGroupLayout]\r\n        })\r\n\r\n        const element_count = isFirstPass ? this.start + count : count\r\n        const start_element = isFirstPass ? this.start : 0\r\n\r\n        const checkSortPipeline = this.device.createComputePipeline({\r\n            layout: pipelineLayout,\r\n            compute: {\r\n                module: this.device.createShaderModule({\r\n                    label: label,\r\n                    code: checkSortSource(isFirstPass, isLastPass, this.mode),\r\n                }),\r\n                entryPoint: this.mode == 'reset' ? 'reset' : 'check_sort',\r\n                constants: {\r\n                    'ELEMENT_COUNT': element_count,\r\n                    'WORKGROUP_SIZE_X': this.workgroup_size.x,\r\n                    'WORKGROUP_SIZE_Y': this.workgroup_size.y,\r\n                    ...(this.mode != 'reset' && { \r\n                        'THREADS_PER_WORKGROUP': this.threads_per_workgroup,\r\n                        'START_ELEMENT': start_element,\r\n                    })\r\n                },\r\n            }\r\n        })\r\n\r\n        this.buffers.outputs.push(outputBuffer)\r\n        this.pipelines.push({ pipeline: checkSortPipeline, bindGroup })\r\n        \r\n        if (!isLastPass) {\r\n            this.create_passes_recursive(outputBuffer, workgroup_count, passIndex + 1)\r\n        }\r\n    }\r\n\r\n    dispatch(pass, dispatchSize, offset = 0) {\r\n        for (let i = 0; i < this.pipelines.length; i++) {\r\n            const { pipeline, bindGroup } = this.pipelines[i]\r\n\r\n            const dispatchIndirect = this.mode != 'reset' && (this.mode == 'full' || i < this.pipelines.length - 1)\r\n\r\n            pass.setPipeline(pipeline)\r\n            pass.setBindGroup(0, bindGroup)\r\n\r\n            if (dispatchIndirect)\r\n                pass.dispatchWorkgroupsIndirect(dispatchSize, offset + i * 3 * 4)\r\n            else\r\n                // Only the reset kernel and the last dispatch of the fast check kernel are constant to (1, 1, 1)\r\n                pass.dispatchWorkgroups(1, 1, 1)\r\n        }\r\n    }\r\n}\r\n\r\nexport default CheckSortKernel","import PrefixSumKernel from \"./PrefixSumKernel\"\r\nimport radixSortSource from \"./shaders/radix_sort\"\r\nimport radixSortSource_LocalShuffle from \"./shaders/optimizations/radix_sort_local_shuffle\"\r\nimport reorderSource from \"./shaders/radix_sort_reorder\"\r\nimport CheckSortKernel from \"./CheckSortKernel\"\r\nimport { create_buffer_from_data, find_optimal_dispatch_size } from \"./utils\"\r\n\r\nclass RadixSortKernel {\r\n    /**\r\n     * Perform a parallel radix sort on the GPU given a buffer of keys and (optionnaly) values\r\n     * Note: The buffers are sorted in-place.\r\n     * \r\n     * Based on \"Fast 4-way parallel radix sorting on GPUs\"\r\n     * https://www.sci.utah.edu/~csilva/papers/cgf.pdf]\r\n     * \r\n     * @param {GPUDevice} device\r\n     * @param {GPUBuffer} keys - Buffer containing the keys to sort\r\n     * @param {GPUBuffer} values - (optional) Buffer containing the associated values\r\n     * @param {number} count - Number of elements to sort\r\n     * @param {number} bit_count - Number of bits per element (default: 32)\r\n     * @param {object} workgroup_size - Workgroup size in x and y dimensions. (x * y) must be a power of two\r\n     * @param {boolean} check_order - Enable \"order checking\" optimization. Can improve performance if the data needs to be sorted in real-time and doesn't change much. (default: false)\r\n     * @param {boolean} local_shuffle - Enable \"local shuffling\" optimization for the radix sort kernel (default: false)\r\n     * @param {boolean} avoid_bank_conflicts - Enable \"avoiding bank conflicts\" optimization for the prefix sum kernel (default: false)\r\n     */\r\n    constructor({\r\n        device,\r\n        keys,\r\n        values,\r\n        count,\r\n        bit_count = 32,\r\n        workgroup_size = { x: 16, y: 16 },\r\n        check_order = false,\r\n        local_shuffle = false,\r\n        avoid_bank_conflicts = false,\r\n    } = {}) {\r\n        if (device == null) throw new Error('No device provided')\r\n        if (keys == null) throw new Error('No keys buffer provided')\r\n        if (!Number.isInteger(count) || count <= 0) throw new Error('Invalid count parameter')\r\n        if (!Number.isInteger(bit_count) || bit_count <= 0 || bit_count > 32) throw new Error(`Invalid bit_count parameter: ${bit_count}`)\r\n        if (!Number.isInteger(workgroup_size.x) || !Number.isInteger(workgroup_size.y)) throw new Error('Invalid workgroup_size parameter')\r\n        if (bit_count % 4 != 0) throw new Error('bit_count must be a multiple of 4')\r\n\r\n        this.device = device\r\n        this.count = count\r\n        this.bit_count = bit_count\r\n        this.workgroup_size = workgroup_size\r\n        this.check_order = check_order\r\n        this.local_shuffle = local_shuffle\r\n        this.avoid_bank_conflicts = avoid_bank_conflicts\r\n\r\n        this.threads_per_workgroup = workgroup_size.x * workgroup_size.y\r\n        this.workgroup_count = Math.ceil(count / this.threads_per_workgroup)\r\n        this.prefix_block_workgroup_count = 4 * this.workgroup_count\r\n\r\n        this.has_values = (values != null) // Is the values buffer provided ?\r\n\r\n        this.dispatchSize = {}  // Dispatch dimension x and y\r\n        this.shaderModules = {} // GPUShaderModules\r\n        this.kernels = {}       // PrefixSumKernel & CheckSortKernels\r\n        this.pipelines = []     // List of passes\r\n        this.buffers = {        // GPUBuffers\r\n            keys: keys,\r\n            values: values\r\n        }       \r\n\r\n        // Create shader modules from wgsl code\r\n        this.create_shader_modules()\r\n        \r\n        // Create multi-pass pipelines\r\n        this.create_pipelines()\r\n    }\r\n\r\n    create_shader_modules() {\r\n        // Remove every occurence of \"values\" in the shader code if values buffer is not provided\r\n        const remove_values = (source) => {\r\n            return source.split('\\n')\r\n                         .filter(line => !line.toLowerCase().includes('values'))\r\n                         .join('\\n')\r\n        }\r\n\r\n        const blockSumSource = this.local_shuffle ? radixSortSource_LocalShuffle : radixSortSource\r\n        \r\n        this.shaderModules = {\r\n            blockSum: this.device.createShaderModule({\r\n                label: 'radix-sort-block-sum',\r\n                code: this.has_values ? blockSumSource : remove_values(blockSumSource),\r\n            }),\r\n            reorder: this.device.createShaderModule({\r\n                label: 'radix-sort-reorder',\r\n                code: this.has_values ? reorderSource : remove_values(reorderSource),\r\n            })\r\n        }\r\n    }\r\n\r\n    create_pipelines() {    \r\n        // Block prefix sum kernel    \r\n        this.create_prefix_sum_kernel()\r\n\r\n        // Indirect dispatch buffers\r\n        const dispatchData = this.calculate_dispatch_sizes()\r\n\r\n        // GPU buffers\r\n        this.create_buffers(dispatchData)\r\n\r\n        // Check sort kernels\r\n        this.create_check_sort_kernels(dispatchData)\r\n\r\n        // Radix sort passes for every 2 bits\r\n        for (let bit = 0; bit < this.bit_count; bit += 2) {\r\n            // Swap buffers every pass\r\n            const even      = (bit % 4 == 0)\r\n            const inKeys    = even ? this.buffers.keys : this.buffers.tmpKeys\r\n            const inValues  = even ? this.buffers.values : this.buffers.tmpValues\r\n            const outKeys   = even ? this.buffers.tmpKeys : this.buffers.keys\r\n            const outValues = even ? this.buffers.tmpValues : this.buffers.values\r\n\r\n            // Compute local prefix sums and block sums\r\n            const blockSumPipeline = this.create_block_sum_pipeline(inKeys, inValues, bit)\r\n            \r\n            // Reorder keys and values\r\n            const reorderPipeline = this.create_reorder_pipeline(inKeys, inValues, outKeys, outValues, bit)\r\n\r\n            this.pipelines.push({ blockSumPipeline, reorderPipeline })\r\n        }\r\n    }\r\n\r\n    create_prefix_sum_kernel() {\r\n        // Prefix Block Sum buffer (4 element per workgroup)\r\n        const prefixBlockSumBuffer = this.device.createBuffer({\r\n            label: 'radix-sort-prefix-block-sum',\r\n            size: this.prefix_block_workgroup_count * 4,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\r\n        })\r\n\r\n        // Create block prefix sum kernel\r\n        const prefixSumKernel = new PrefixSumKernel({ \r\n            device: this.device,\r\n            data: prefixBlockSumBuffer, \r\n            count: this.prefix_block_workgroup_count,\r\n            workgroup_size: this.workgroup_size,\r\n            avoid_bank_conflicts: this.avoid_bank_conflicts,\r\n        })\r\n\r\n        this.kernels.prefixSum = prefixSumKernel\r\n        this.buffers.prefixBlockSum = prefixBlockSumBuffer\r\n    }\r\n\r\n    calculate_dispatch_sizes() {\r\n        // Radix sort dispatch size\r\n        const dispatchSize = find_optimal_dispatch_size(this.device, this.workgroup_count)\r\n\r\n        // Prefix sum dispatch sizes\r\n        const prefixSumDispatchSize = this.kernels.prefixSum.get_dispatch_chain()\r\n\r\n        // Check sort element count (fast/full)\r\n        const check_sort_fast_count = Math.min(this.count, this.threads_per_workgroup * 4)\r\n        const check_sort_full_count = this.count - check_sort_fast_count\r\n        const start_full = check_sort_fast_count - 1\r\n\r\n        // Check sort dispatch sizes\r\n        const dispatchSizesFast = CheckSortKernel.find_optimal_dispatch_chain(this.device, check_sort_fast_count, this.workgroup_size)\r\n        const dispatchSizesFull = CheckSortKernel.find_optimal_dispatch_chain(this.device, check_sort_full_count, this.workgroup_size)\r\n\r\n        // Initial dispatch sizes\r\n        const initialDispatch = [\r\n            dispatchSize.x, dispatchSize.y, 1, // Radix Sort + Reorder\r\n            ...dispatchSizesFast.slice(0, 3),  // Check sort fast\r\n            ...prefixSumDispatchSize           // Prefix Sum\r\n        ]\r\n\r\n        // Dispatch offsets in main buffer\r\n        this.dispatchOffsets = {\r\n            radix_sort: 0,\r\n            check_sort_fast: 3 * 4,\r\n            prefix_sum: 6 * 4\r\n        }\r\n\r\n        this.dispatchSize = dispatchSize\r\n        this.initialDispatch = initialDispatch\r\n\r\n        return {\r\n            initialDispatch,\r\n            dispatchSizesFull,\r\n            check_sort_fast_count, \r\n            check_sort_full_count, \r\n            start_full \r\n        }\r\n    }\r\n\r\n    create_buffers(dispatchData) {\r\n        // Keys and values double buffering\r\n        const tmpKeysBuffer = this.device.createBuffer({\r\n            label: 'radix-sort-tmp-keys',\r\n            size: this.count * 4,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\r\n        })\r\n        const tmpValuesBuffer = !this.has_values ? null : this.device.createBuffer({\r\n            label: 'radix-sort-tmp-values',\r\n            size: this.count * 4,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\r\n        })\r\n\r\n        // Local Prefix Sum buffer (1 element per item)\r\n        const localPrefixSumBuffer = this.device.createBuffer({\r\n            label: 'radix-sort-local-prefix-sum',\r\n            size: this.count * 4,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\r\n        })\r\n\r\n        this.buffers.tmpKeys = tmpKeysBuffer\r\n        this.buffers.tmpValues = tmpValuesBuffer\r\n        this.buffers.localPrefixSum = localPrefixSumBuffer\r\n\r\n        // Only create indirect dispatch buffers when check_order optimization is enabled\r\n        if (!this.check_order) {\r\n            return\r\n        }\r\n\r\n        // Dispatch sizes (radix sort, check sort, prefix sum)\r\n        const dispatchBuffer = create_buffer_from_data({\r\n            device: this.device, \r\n            label: 'radix-sort-dispatch-size',\r\n            data: dispatchData.initialDispatch, \r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.INDIRECT\r\n        })\r\n        const originalDispatchBuffer = create_buffer_from_data({\r\n            device: this.device, \r\n            label: 'radix-sort-dispatch-size-original',\r\n            data: dispatchData.initialDispatch, \r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\r\n        })\r\n\r\n        // Dispatch sizes (full sort)\r\n        const checkSortFullDispatchBuffer = create_buffer_from_data({\r\n            label: 'check-sort-full-dispatch-size',\r\n            device: this.device, \r\n            data: dispatchData.dispatchSizesFull,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.INDIRECT\r\n        })\r\n        const checkSortFullOriginalDispatchBuffer = create_buffer_from_data({\r\n            label: 'check-sort-full-dispatch-size-original',\r\n            device: this.device, \r\n            data: dispatchData.dispatchSizesFull,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\r\n        })\r\n\r\n        // Flag to tell if the data is sorted\r\n        const isSortedBuffer = create_buffer_from_data({\r\n            label: 'is-sorted',\r\n            device: this.device, \r\n            data: new Uint32Array([0]), \r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\r\n        })\r\n\r\n        this.buffers.dispatchSize = dispatchBuffer\r\n        this.buffers.originalDispatchSize = originalDispatchBuffer\r\n        this.buffers.checkSortFullDispatchSize = checkSortFullDispatchBuffer\r\n        this.buffers.originalCheckSortFullDispatchSize = checkSortFullOriginalDispatchBuffer\r\n        this.buffers.isSorted = isSortedBuffer\r\n    }\r\n\r\n    create_check_sort_kernels(checkSortPartitionData) {\r\n        if (!this.check_order) {\r\n            return\r\n        }\r\n\r\n        const { check_sort_fast_count, check_sort_full_count, start_full } = checkSortPartitionData\r\n\r\n        // Create the full pass\r\n        const checkSortFull = new CheckSortKernel({\r\n            mode: 'full',\r\n            device: this.device,\r\n            data: this.buffers.keys,\r\n            result: this.buffers.dispatchSize,\r\n            original: this.buffers.originalDispatchSize,\r\n            is_sorted: this.buffers.isSorted,\r\n            count: check_sort_full_count,\r\n            start: start_full,\r\n            workgroup_size: this.workgroup_size\r\n        })\r\n\r\n        // Create the fast pass\r\n        const checkSortFast = new CheckSortKernel({\r\n            mode: 'fast',\r\n            device: this.device,\r\n            data: this.buffers.keys,\r\n            result: this.buffers.checkSortFullDispatchSize,\r\n            original: this.buffers.originalCheckSortFullDispatchSize,\r\n            is_sorted: this.buffers.isSorted,\r\n            count: check_sort_fast_count,\r\n            workgroup_size: this.workgroup_size\r\n        })\r\n\r\n        const initialDispatchElementCount = this.initialDispatch.length / 3\r\n\r\n        if (checkSortFast.threads_per_workgroup < checkSortFull.pipelines.length || checkSortFull.threads_per_workgroup < initialDispatchElementCount) {\r\n            console.warn(`Warning: workgroup size is too small to enable check sort optimization, disabling...`)\r\n            this.check_order = false\r\n            return\r\n        }\r\n\r\n        // Create the reset pass\r\n        const checkSortReset = new CheckSortKernel({\r\n            mode: 'reset',\r\n            device: this.device,\r\n            data: this.buffers.keys,\r\n            original: this.buffers.originalDispatchSize,\r\n            result: this.buffers.dispatchSize,\r\n            is_sorted: this.buffers.isSorted,\r\n            count: initialDispatchElementCount,\r\n            workgroup_size: find_optimal_dispatch_size(this.device, initialDispatchElementCount)\r\n        })\r\n\r\n        this.kernels.checkSort = {\r\n            reset: checkSortReset,\r\n            fast: checkSortFast,\r\n            full: checkSortFull,\r\n        }\r\n    }\r\n\r\n    create_block_sum_pipeline(inKeys, inValues, bit) {\r\n        const bindGroupLayout = this.device.createBindGroupLayout({\r\n            label: 'radix-sort-block-sum',\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: this.local_shuffle ? 'storage' : 'read-only-storage' }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'storage' }\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'storage' }\r\n                },\r\n                ...(this.local_shuffle && this.has_values ? [{\r\n                    binding: 3,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'storage' }\r\n                }] : [])\r\n            ]\r\n        })\r\n\r\n        const bindGroup = this.device.createBindGroup({\r\n            layout: bindGroupLayout,\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: { buffer: inKeys }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: { buffer: this.buffers.localPrefixSum }\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    resource: { buffer: this.buffers.prefixBlockSum }\r\n                },\r\n                // \"Local shuffle\" optimization needs access to the values buffer\r\n                ...(this.local_shuffle && this.has_values ? [{\r\n                    binding: 3,\r\n                    resource: { buffer: inValues }\r\n                }] : [])\r\n            ]\r\n        })\r\n\r\n        const pipelineLayout = this.device.createPipelineLayout({\r\n            bindGroupLayouts: [ bindGroupLayout ]\r\n        })\r\n\r\n        const blockSumPipeline = this.device.createComputePipeline({\r\n            label: 'radix-sort-block-sum',\r\n            layout: pipelineLayout,\r\n            compute: {\r\n                module: this.shaderModules.blockSum,\r\n                entryPoint: 'radix_sort',\r\n                constants: {\r\n                    'WORKGROUP_SIZE_X': this.workgroup_size.x,\r\n                    'WORKGROUP_SIZE_Y': this.workgroup_size.y,\r\n                    'WORKGROUP_COUNT': this.workgroup_count,\r\n                    'THREADS_PER_WORKGROUP': this.threads_per_workgroup,\r\n                    'ELEMENT_COUNT': this.count,\r\n                    'CURRENT_BIT': bit,\r\n                }\r\n            }\r\n        })\r\n\r\n        return {\r\n            pipeline: blockSumPipeline,\r\n            bindGroup\r\n        }\r\n    }\r\n\r\n    create_reorder_pipeline(inKeys, inValues, outKeys, outValues, bit) {\r\n        const bindGroupLayout = this.device.createBindGroupLayout({\r\n            label: 'radix-sort-reorder',\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'read-only-storage' }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'storage' }\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'read-only-storage' }\r\n                },\r\n                {\r\n                    binding: 3,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'read-only-storage' }\r\n                },\r\n                ...(this.has_values ? [\r\n                    {\r\n                        binding: 4,\r\n                        visibility: GPUShaderStage.COMPUTE,\r\n                        buffer: { type: 'read-only-storage' }\r\n                    },\r\n                    {\r\n                        binding: 5,\r\n                        visibility: GPUShaderStage.COMPUTE,\r\n                        buffer: { type: 'storage' }\r\n                    }\r\n                ] : [])\r\n            ]\r\n        })\r\n\r\n        const bindGroup = this.device.createBindGroup({\r\n            layout: bindGroupLayout,\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: { buffer: inKeys }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: { buffer: outKeys }\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    resource: { buffer: this.buffers.localPrefixSum }\r\n                },\r\n                {\r\n                    binding: 3,\r\n                    resource: { buffer: this.buffers.prefixBlockSum }\r\n                },\r\n                ...(this.has_values ? [\r\n                    {\r\n                        binding: 4,\r\n                        resource: { buffer: inValues }\r\n                    },\r\n                    {\r\n                        binding: 5,\r\n                        resource: { buffer: outValues }\r\n                    }\r\n                ] : [])\r\n            ]\r\n        })\r\n\r\n        const pipelineLayout = this.device.createPipelineLayout({\r\n            bindGroupLayouts: [ bindGroupLayout ]\r\n        })\r\n\r\n        const reorderPipeline = this.device.createComputePipeline({\r\n            label: 'radix-sort-reorder',\r\n            layout: pipelineLayout,\r\n            compute: {\r\n                module: this.shaderModules.reorder,\r\n                entryPoint: 'radix_sort_reorder',\r\n                constants: {\r\n                    'WORKGROUP_SIZE_X': this.workgroup_size.x,\r\n                    'WORKGROUP_SIZE_Y': this.workgroup_size.y,\r\n                    'WORKGROUP_COUNT': this.workgroup_count,\r\n                    'THREADS_PER_WORKGROUP': this.threads_per_workgroup,\r\n                    'ELEMENT_COUNT': this.count,\r\n                    'CURRENT_BIT': bit,\r\n                }\r\n            }\r\n        })\r\n\r\n        return {\r\n            pipeline: reorderPipeline,\r\n            bindGroup\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Encode all pipelines into the current pass\r\n     * \r\n     * @param {GPUComputePassEncoder} pass \r\n     */\r\n    dispatch(pass) {\r\n        if (!this.check_order) {\r\n            this.#dispatchPipelines(pass)\r\n        }\r\n        else {\r\n            this.#dispatchPipelinesIndirect(pass)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispatch workgroups from CPU args\r\n     */\r\n    #dispatchPipelines(pass) {\r\n        for (let i = 0; i < this.bit_count / 2; i++) {\r\n            const { blockSumPipeline, reorderPipeline } = this.pipelines[i]\r\n            \r\n            // Compute local prefix sums and block sums\r\n            pass.setPipeline(blockSumPipeline.pipeline)\r\n            pass.setBindGroup(0, blockSumPipeline.bindGroup)\r\n            pass.dispatchWorkgroups(this.dispatchSize.x, this.dispatchSize.y, 1)\r\n\r\n            // Compute block sums prefix sum\r\n            this.kernels.prefixSum.dispatch(pass)\r\n\r\n            // Reorder keys and values\r\n            pass.setPipeline(reorderPipeline.pipeline)\r\n            pass.setBindGroup(0, reorderPipeline.bindGroup)\r\n            pass.dispatchWorkgroups(this.dispatchSize.x, this.dispatchSize.y, 1)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispatch workgroups from indirect GPU buffers (used when check_order is enabled)\r\n     */\r\n    #dispatchPipelinesIndirect(pass) {\r\n        // Reset the `dispatch` and `is_sorted` buffers\r\n        this.kernels.checkSort.reset.dispatch(pass)\r\n        \r\n        for (let i = 0; i < this.bit_count / 2; i++) {\r\n            const { blockSumPipeline, reorderPipeline } = this.pipelines[i]\r\n\r\n            if (i % 2 == 0) {\r\n                // Check if the data is sorted every 2 passes\r\n                this.kernels.checkSort.fast.dispatch(pass, this.buffers.dispatchSize, this.dispatchOffsets.check_sort_fast)\r\n                this.kernels.checkSort.full.dispatch(pass, this.buffers.checkSortFullDispatchSize)\r\n            }\r\n            \r\n            // Compute local prefix sums and block sums\r\n            pass.setPipeline(blockSumPipeline.pipeline)\r\n            pass.setBindGroup(0, blockSumPipeline.bindGroup)\r\n            pass.dispatchWorkgroupsIndirect(this.buffers.dispatchSize, this.dispatchOffsets.radix_sort)\r\n\r\n            // Compute block sums prefix sum\r\n            this.kernels.prefixSum.dispatch(pass, this.buffers.dispatchSize, this.dispatchOffsets.prefix_sum)\r\n\r\n            // Reorder keys and values\r\n            pass.setPipeline(reorderPipeline.pipeline)\r\n            pass.setBindGroup(0, reorderPipeline.bindGroup)\r\n            pass.dispatchWorkgroupsIndirect(this.buffers.dispatchSize, this.dispatchOffsets.radix_sort)\r\n        }\r\n    }\r\n}\r\n\r\nexport default RadixSortKernel"],"names":["prefixSumSource","prefixSumNoBankConflictSource","find_optimal_dispatch_size","device","workgroup_count","dispatchSize","x","y","limits","maxComputeWorkgroupsPerDimension","Math","floor","sqrt","ceil","create_buffer_from_data","_ref","label","data","_ref$usage","usage","dispatchSizes","createBuffer","size","length","mappedAtCreation","dispatchData","Uint32Array","getMappedRange","set","unmap","PrefixSumKernel","count","_ref$workgroup_size","workgroup_size","_ref$avoid_bank_confl","avoid_bank_conflicts","_classCallCheck","threads_per_workgroup","items_per_workgroup","log2","Error","concat","pipelines","shaderModule","createShaderModule","code","prefixSumSource_NoBankConflict","create_pass_recursive","_createClass","key","value","blockSumBuffer","GPUBufferUsage","STORAGE","COPY_SRC","COPY_DST","bindGroupLayout","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","COMPUTE","buffer","type","bindGroup","createBindGroup","layout","resource","pipelineLayout","createPipelineLayout","bindGroupLayouts","scanPipeline","createComputePipeline","compute","module","entryPoint","constants","push","pipeline","blockSumPipeline","get_dispatch_chain","flatMap","p","dispatch","pass","dispatchSizeBuffer","offset","arguments","undefined","i","_this$pipelines$i","setPipeline","setBindGroup","dispatchWorkgroups","dispatchWorkgroupsIndirect","radixSortSource","radixSortCoalescedSource","radixSortReorderSource","checkSortSource","isFirstPass","isLastPass","kernelMode","first_pass_load_data","last_pass","write_reduction_result","last_pass_full","last_pass_fast","CheckSortKernel","result","original","is_sorted","_ref$start","start","_ref$mode","mode","buffers","outputs","create_passes_recursive","passIndex","outputBuffer","_toConsumableArray","element_count","start_element","checkSortPipeline","_objectSpread","dispatchIndirect","find_optimal_dispatch_chain","item_count","sizes","target_workgroup_count","_RadixSortKernel_brand","WeakSet","RadixSortKernel","keys","values","_ref$bit_count","bit_count","_ref$check_order","check_order","_ref$local_shuffle","local_shuffle","_classPrivateMethodInitSpec","Number","isInteger","prefix_block_workgroup_count","has_values","shaderModules","kernels","create_shader_modules","create_pipelines","remove_values","source","split","filter","line","toLowerCase","includes","join","blockSumSource","radixSortSource_LocalShuffle","blockSum","reorder","reorderSource","create_prefix_sum_kernel","calculate_dispatch_sizes","create_buffers","create_check_sort_kernels","bit","even","inKeys","tmpKeys","inValues","tmpValues","outKeys","outValues","create_block_sum_pipeline","reorderPipeline","create_reorder_pipeline","prefixBlockSumBuffer","prefixSumKernel","prefixSum","prefixBlockSum","prefixSumDispatchSize","check_sort_fast_count","min","check_sort_full_count","start_full","dispatchSizesFast","dispatchSizesFull","initialDispatch","slice","dispatchOffsets","radix_sort","check_sort_fast","prefix_sum","tmpKeysBuffer","tmpValuesBuffer","localPrefixSumBuffer","localPrefixSum","dispatchBuffer","INDIRECT","originalDispatchBuffer","checkSortFullDispatchBuffer","checkSortFullOriginalDispatchBuffer","isSortedBuffer","originalDispatchSize","checkSortFullDispatchSize","originalCheckSortFullDispatchSize","isSorted","checkSortPartitionData","checkSortFull","checkSortFast","initialDispatchElementCount","console","warn","checkSortReset","checkSort","reset","fast","full","_assertClassBrand","_dispatchPipelines","call","_dispatchPipelinesIndirect","_this$pipelines$i2"],"mappings":"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"}